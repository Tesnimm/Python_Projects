# -*- coding: utf-8 -*-
"""FruitWithColors.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pkhSEOQWiUd-WxzW45VMGuw4jC_IXzym
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.model_selection import train_test_split

from google.colab import files

uploaded = files.upload()

data=pd.read_table('fruit_data_with_colors.txt')

data.head()

data.shape

original_fruit=dict(zip(data.fruit_label.unique(),data.fruit_name.unique()))
original_fruit

X=data[['height','width','mass','color_score']]
y=data['fruit_label']
X_train,X_test,y_train,y_test=train_test_split(X,y,random_state=0)

from matplotlib import cm
cmap=cm.get_cmap('gnuplot')
scatter=pd.plotting.scatter_matrix(X_train,c=y_train,marker='o',s=40,hist_kwds={'bins':15},figsize=(19,9),cmap=cmap)

from sklearn.neighbors import KNeighborsClassifier

knn=KNeighborsClassifier(n_neighbors=6)

knn.fit(X_train,y_train)
knn.score(X_test,y_test)

k_range=range(1,20)
scores=[]

for k in k_range:
  knn1=KNeighborsClassifier(n_neighbors=k)
  knn1.fit(X_train,y_train)
  scores.append(knn1.score(X_test,y_test))

plt.figure()
plt.xlabel('k')
plt.ylabel('Dogruluk')
plt.scatter(k_range,scores)
plt.xticks([0,5,10,15,20]);

fruit_prediction=knn.predict([[20,4.3,5.5,0.7]])
original_fruit[fruit_prediction[0]]

print('K-NN icine gitim seti performansi: {:.2f}'.format(knn.score(X_train,y_train)))
print('K-NN icin test seti performansi: {:.2f}'.format(knn.score(X_test,y_test)))

deneme=[[20,4.3,5.5,0.7]]
print('Tahmin edilen meyve ',deneme,' : ',original_fruit[knn.predict(deneme)[0]])

from sklearn.tree import DecisionTreeClassifier
clf=DecisionTreeClassifier().fit(X_train,y_train)

print('Karar Agaci Siniflandiricisi icin egitim seti performansi: {:.2f}'.format(clf.score(X_train,y_train)))
print('Karar Agaci Siniflandiricisi icin egitim seti performansi: {:.2f}'.format(clf.score(X_test,y_test)))

print('Feature importances: {}'.format(clf.feature_importances_))

from sklearn.metrics import confusion_matrix
clf_predicted=clf.predict(X_test)
print(confusion_matrix(y_test,clf_predicted))

from sklearn.metrics import classification_report
print(classification_report(y_test,clf_predicted))

import seaborn as sns
print('For test')
cm=confusion_matrix(y_test,clf_predicted)
sns.heatmap(cm,center=True,annot=True,fmt='d')