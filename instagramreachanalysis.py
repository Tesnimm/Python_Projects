# -*- coding: utf-8 -*-
"""InstagramReachAnalysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q3LwhR1s6EyYm-R-dNU4b5fJlMiWc5u0
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from wordcloud import WordCloud,STOPWORDS,ImageColorGenerator
from sklearn.model_selection import train_test_split
from sklearn.linear_model import PassiveAggressiveRegressor

from google.colab import files

uploaded = files.upload()

data=pd.read_csv('Instagram data.csv',encoding='latin1')
print(data.head())

#looking uf dataset contains any null values or not
data.isnull().sum()

#if it has lets drop the null values
data=data.dropna()

data.info()

#analyzing instagram reach
plt.figure(figsize=(10,8))
plt.style.use('fivethirtyeight')
plt.title("Distribution of Impressions from Home")
sns.distplot(data['From Home'])
plt.show()

plt.figure(figsize=(10,8))
plt.title("Distribution of Impressions From Hashtags")
sns.distplot(data['From Hashtags'])
plt.show()

plt.figure(figsize=(10,8))
plt.title("Distribution of Impressions from Explore")
sns.distplot(data['From Explore'])
plt.show()

#percentage of impressions i get from various sources on Instagram
home=data['From Home'].sum()
hashtags=data['From Hashtags'].sum()
explore=data['From Explore'].sum()
other=data['From Other'].sum()

labels=['From Home','From Hashtags','From Explore','Other']
values=[home,hashtags,explore,other]

fig=px.pie(data,values=values,names=labels,title='Impressions on Instagram Posts from Various Sources',hole=0.5)
fig.show()

#analyzing content
text = " ".join(i for i in data.Caption)
stopwords = set(STOPWORDS)
wordcloud = WordCloud(stopwords=stopwords, background_color="white").generate(text)
plt.style.use('classic')
plt.figure(figsize=(12,10))
plt.imshow(wordcloud,interpolation='bilinear')
plt.axis("off")
plt.show()

text = " ".join(i for i in data.Hashtags)
stopwords = set(STOPWORDS)
wordcloud = WordCloud(stopwords=stopwords, background_color="white").generate(text)
plt.style.use('classic')
plt.figure(figsize=(12,10))
plt.imshow(wordcloud,interpolation='bilinear')
plt.axis("off")
plt.show()

#analyzing relationships
figure=px.scatter(data_frame=data,x='Impressions',y='Likes',size='Likes',trendline='ols',title='Relationship between Likes and Impressions')
figure.show()

#analyzing converion rate
conversion_rate=(data['Follows'].sum()/data['Profile Visits'].sum())*100
print(conversion_rate)

figure=px.scatter(data_frame=data,x='Profile Visits',y='Follows',size='Follows',trendline='ols',title='relationship between profile visits and followers gained')
figure.show()

#instagram reach prediction model
x=np.array(data[['Likes','Saves','Comments','Shares','Profile Visits','Follows']])
y=np.array(data['Impressions'])
xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.2,random_state=42)

model=PassiveAggressiveRegressor()
model.fit(xtrain,ytrain)
model.score(xtest,ytest)

features=np.array([[282.0,233.0,4.0,9.0,165.0,54.0]])
model.predict(features)